library(shiny); source('app.R')
source('app.R')
source('app.R')
runApp('Downloads/shiny01')
runApp()
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
runApp('Downloads/shiny01')
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
getwd()
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
getwd()
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
use_python("/opt/anaconda3/bin/python")
use_python("/opt/anaconda3/bin/python")
setwd("/Users/yenchin/Documents/BDA/shiny01")
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
setwd("/Users/yenchin/Documents/BDA/shiny01")
system2("python3", args = "rf_model_wrapper.py", input = '{"features": [1.2, 3.4, 5.6, 7.8]}', stdout = TRUE)
input_json <- jsonlite::toJSON(list(file_path = "/完整路徑/your_test.txt"), auto_unbox = TRUE)
system2("python3", args = "rf_model_wrapper.py", input = input_json, stdout = TRUE)
readLines("/Users/yenchin/Documents/BDA/shiny01/Data/test", n = 5)
readLines("/Users/yenchin/Documents/BDA/shiny01/Data/test", n = 5)
("/Users/yenchin/Documents/BDA/shiny01/Data/test/Xa", n = 5)
readLines("/Users/yenchin/Documents/BDA/shiny01/Data/test/Xa", n = 5)
readLines("/Users/yenchin/Documents/BDA/shiny01/Data/test/Xa/gvb000001.txt", n = 5)
source("~/Documents/BDA/shiny01/global0.R")
use_python("/opt/anaconda3/bin/python")
use_python("/opt/anaconda3/bin/python")
cat("連續型預測結果： ",pred)
if (input$task == "con") {
pred <- predict_con(file_path, scale, model_path = model_path, label = label, folder = FALSE)
} else {
pred <- predict_dis(file_path, scale, model_path = model_path, label = label, folder = FALSE)
}
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css")
),
theme = shinytheme("flatly"),
div(class = "custom-title", "機械手臂"),
tabsetPanel(
tabPanel("資料介紹",
fluidRow(
div(style = "margin-left: 40px;",
selectInput("s1", "", choices = c("實驗背景", "資料說明","預期目標"))
)
),
conditionalPanel(
condition = "input.s1 == '實驗背景'",
uiOutput("a1")
),
conditionalPanel(
condition = "input.s1 == '資料說明'",
fluidRow(
div(
style = "margin-top: 20px;margin-left: 35px;",
p("測試時單一方向作動，固定速度運轉 5–6 分鐘，每 5 秒記錄一次 X、Y、Z 軸的震動資料。"),
radioButtons("info", "",choices = c("安裝位置", "負荷設定"),inline = TRUE),
uiOutput("a2"),
tags$img(
src = "p2.png",
style = "max-width: 700px; margin-top: 20px;" ))
)),
conditionalPanel(
condition = "input.s1 == '預期目標'",
uiOutput("a3")
)
),
tabPanel("學習方法",
fluidPage(
fluidRow(
column(6, offset = 2,
wellPanel(
fluidRow(
column(12,
div(style = "text-align:center; max-width: 600px; margin: 0 auto;",
selectInput("model", "選擇模型：", choices = c("CNN" = "cnn", "Random Forest" = "rf")),
fileInput("file", "請上傳測試資料 (.txt)", accept = ".txt"),
selectInput("group", "請選擇資料類別：",
choices = c("Xa - 水平傳動軸馬達側" = "Xa",
"Xb - 水平傳動軸惰輪側" = "Xb",
"Ya - 垂直傳動軸馬達側" = "Ya",
"Yb - 垂直傳動軸惰輪側" = "Yb")),
radioButtons("task", "請選擇預測任務：", choices = c("連續型預測" = "con", "離散型預測" = "dis")),
actionButton("predict", "開始預測", class = "btn btn-primary")
)
)
)
),
br(),
wellPanel(
textOutput("info"),
textOutput("info2"),
textOutput("result"),
textOutput("result2")
)
)
)
)
))
)
output$info <- renderText({
paste("檔案屬於：", group)
})
library(shiny)
library(shinythemes)
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css")
),
theme = shinytheme("flatly"),
div(class = "custom-title", "機械手臂"),
tabsetPanel(
tabPanel("資料介紹",
fluidRow(
div(style = "margin-left: 40px;",
selectInput("s1", "", choices = c("實驗背景", "資料說明","預期目標"))
)
),
conditionalPanel(
condition = "input.s1 == '實驗背景'",
uiOutput("a1")
),
conditionalPanel(
condition = "input.s1 == '資料說明'",
fluidRow(
div(
style = "margin-top: 20px;margin-left: 35px;",
p("測試時單一方向作動，固定速度運轉 5–6 分鐘，每 5 秒記錄一次 X、Y、Z 軸的震動資料。"),
radioButtons("info", "",choices = c("安裝位置", "負荷設定"),inline = TRUE),
uiOutput("a2"),
tags$img(
src = "p2.png",
style = "max-width: 700px; margin-top: 20px;" ))
)),
conditionalPanel(
condition = "input.s1 == '預期目標'",
uiOutput("a3")
)
),
tabPanel("學習方法",
fluidPage(
fluidRow(
column(6, offset = 2,
wellPanel(
fluidRow(
column(12,
div(style = "text-align:center; max-width: 600px; margin: 0 auto;",
selectInput("model", "選擇模型：", choices = c("CNN" = "cnn", "Random Forest" = "rf")),
fileInput("file", "請上傳測試資料 (.txt)", accept = ".txt"),
selectInput("group", "請選擇資料類別：",
choices = c("Xa - 水平傳動軸馬達側" = "Xa",
"Xb - 水平傳動軸惰輪側" = "Xb",
"Ya - 垂直傳動軸馬達側" = "Ya",
"Yb - 垂直傳動軸惰輪側" = "Yb")),
radioButtons("task", "請選擇預測任務：", choices = c("連續型預測" = "con", "離散型預測" = "dis")),
actionButton("predict", "開始預測", class = "btn btn-primary")
)
)
)
),
br(),
wellPanel(
textOutput("info"),
textOutput("info2"),
textOutput("result"),
textOutput("result2")
)
)
)
)
))
)
server <- function(input, output, session) {
# 資料介紹
output$a1 <- renderUI({
if (input$s1 == "實驗背景") {
tags$img(
src = "p1.png",
style = "max-width: 800px; margin: 20px;"
)
}
})
output$a2 <- renderUI({
if (input$s1 == "資料說明") {
switch(input$info,
"安裝位置" = tagList("",
tags$ul(
tags$li("Xa - 水平傳動軸馬達側"),
tags$li("Xb - 水平傳動軸惰輪側"),
tags$li("Ya - 垂直傳動軸馬達側"),
tags$li("Yb - 垂直傳動軸惰輪側")
)
),
"負荷設定" = tagList("",
tags$ul(
tags$li("水平方向：65、80（正常）、95、130"),
tags$li("垂直方向：220、260（正常）、300、380"),
tags$br(),
tags$br()
)
)
)
}
})
output$a3 <- renderUI({
if (input$s1 == "預期目標") {
tags$img(
src = "p3.png",
style = "max-width: 800px; margin: 20px;"
)
}
})
# 預測
observeEvent(input$predict, {
req(input$file)
if (input$model == "cnn") {
file_path <- input$file$datapath
group <- input$group
label <- ifelse(group %in% c("Xa", "Xb"), "X", "Y")
scale <- load_scaler(scaler_paths[[group]])
model_path <- model_paths[[paste0(group, "_", input$task)]]
if (input$task == "con") {
pred <- predict_con(file_path, scale, model_path = model_path, label = label, folder = FALSE)
} else {
pred <- predict_dis(file_path, scale, model_path = model_path, label = label, folder = FALSE)
}
output$info <- renderText({
paste("檔案屬於：", group)
})
output$info2 <- renderText({
task01 <- ifelse(input$task == "con", "連續型預測", "離散型預測")
paste(" 模型：", task01)
})
output$result <- renderPrint({
if (input$task == "con") {
cat("連續型預測結果： ",pred)
}else{
cat("離散型預測結果： ",pred)
}
})
output$result2 <- renderPrint({
reference <- if (label == "X") c(65, 80, 95, 130) else c(220, 260, 300, 380)
explanation <- if (input$task == "con") {
closest <- reference[which.min(abs(reference - pred))]
cat("預測類別 :", closest,
if (label == "X" && closest == 80) "----- 正常負荷" else if (label == "Y" && closest == 260) "----- 正常負荷" else "----- 不正常")
} else {
cat("預測類別 :", pred,
if (label == "X" && pred == 80) "----- 屬正常負荷" else if (label == "Y" && pred == 260) "----- 正常負荷" else "----- 不正常")
}
})
} else if (input$model == "rf") {
file_path <- input$file$datapath
data <- read.table(file_path)  # 假設是純數字表格
# 將資料轉為 list 傳入 Python
input_list <- list(features = as.numeric(unlist(data)))
input_json <- jsonlite::toJSON(input_list, auto_unbox = TRUE)
# 呼叫 Python rf_model_wrapper.py，讀 stdin 輸出 JSON
result <- system2("python3", args = "rf_model_wrapper.py", input = input_json, stdout = TRUE)
pred <- jsonlite::fromJSON(result)$prediction
output$info <- renderText({ paste("檔案屬於：", input$group) })
output$info2 <- renderText({ paste("模型：Random Forest") })
output$result <- renderPrint({
cat("預測結果：", pred)
})
output$result2 <- renderPrint({
label <- ifelse(input$group %in% c("Xa", "Xb"), "X", "Y")
reference <- if (label == "X") c(65, 80, 95, 130) else c(220, 260, 300, 380)
closest <- reference[which.min(abs(reference - pred))]
cat("預測類別 :", closest,
if (label == "X" && closest == 80) "----- 正常負荷" else if (label == "Y" && closest == 260) "----- 正常負荷" else "----- 不正常")
})
}
})
}
library(shiny)
library(reticulate)
setwd("/Users/yenchin/Documents/BDA/shiny01")
use_python("/opt/anaconda3/bin/python")
source_python("BigDataAnalysis_Package.py")
# 預載標準化器與模型路徑對應表
scaler_paths <- list(
Xa = "Xa_scale.pkl",
Xb = "Xb_scale.pkl",
Ya = "Ya_scale.pkl",
Yb = "Yb_scale.pkl"
)
model_paths <- list(
Xa_dis = "Xa_dis.pth",
Xa_con = "Xa_con.pth",
Xb_dis = "Xb_dis.pth",
Xb_con = "Xb_con.pth",
Ya_dis = "Ya_dis.pth",
Ya_con = "Ya_con.pth",
Yb_dis = "Yb_dis.pth",
Yb_con = "Yb_con.pth"
)
model_paths <- list(
Xa_dis = "Xa_dis.pth",
Xa_con = "Xa_con.pth",
Xb_dis = "Xb_dis.pth",
Xb_con = "Xb_con.pth",
Ya_dis = "Ya_dis.pth",
Ya_con = "Ya_con.pth",
Yb_dis = "Yb_dis.pth",
Yb_con = "Yb_con.pth"
)
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css")
),
theme = shinytheme("flatly"),
div(class = "custom-title", "機械手臂"),
tabsetPanel(
tabPanel("資料介紹",
fluidRow(
div(style = "margin-left: 40px;",
selectInput("s1", "", choices = c("實驗背景", "資料說明","預期目標"))
)
),
conditionalPanel(
condition = "input.s1 == '實驗背景'",
uiOutput("a1")
),
conditionalPanel(
condition = "input.s1 == '資料說明'",
fluidRow(
div(
style = "margin-top: 20px;margin-left: 35px;",
p("測試時單一方向作動，固定速度運轉 5–6 分鐘，每 5 秒記錄一次 X、Y、Z 軸的震動資料。"),
radioButtons("info", "",choices = c("安裝位置", "負荷設定"),inline = TRUE),
uiOutput("a2"),
tags$img(
src = "p2.png",
style = "max-width: 700px; margin-top: 20px;" ))
)),
conditionalPanel(
condition = "input.s1 == '預期目標'",
uiOutput("a3")
)
),
tabPanel("學習方法",
fluidPage(
fluidRow(
column(6, offset = 2,
wellPanel(
fluidRow(
column(12,
div(style = "text-align:center; max-width: 600px; margin: 0 auto;",
selectInput("model", "選擇模型：", choices = c("CNN" = "cnn", "Random Forest" = "rf")),
fileInput("file", "請上傳測試資料 (.txt)", accept = ".txt"),
selectInput("group", "請選擇資料類別：",
choices = c("Xa - 水平傳動軸馬達側" = "Xa",
"Xb - 水平傳動軸惰輪側" = "Xb",
"Ya - 垂直傳動軸馬達側" = "Ya",
"Yb - 垂直傳動軸惰輪側" = "Yb")),
radioButtons("task", "請選擇預測任務：", choices = c("連續型預測" = "con", "離散型預測" = "dis")),
actionButton("predict", "開始預測", class = "btn btn-primary")
)
)
)
),
br(),
wellPanel(
textOutput("info"),
textOutput("info2"),
textOutput("result"),
textOutput("result2")
)
)
)
)
))
)
# 預載標準化器與模型路徑對應表
scaler_paths <- list(
Xa = "Xa_scale.pkl",
Xb = "Xb_scale.pkl",
Ya = "Ya_scale.pkl",
Yb = "Yb_scale.pkl"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
